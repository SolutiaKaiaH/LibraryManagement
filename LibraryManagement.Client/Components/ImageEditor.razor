@using Syncfusion.Blazor.ImageEditor
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Spinner
@inject HttpClient Http

<SfDialog Width="800px"
          Height="650px"
          IsModal="true"
          ShowCloseIcon="true">
          <DialogEvents Closed="OnDialogClosedAsync" Created="OnDialogOpenedAsync"></DialogEvents>
  <DialogTemplates>
    <Header>Edit Image</Header>
    <Content>
      <div class="editor-wrapper">
        <SfImageEditor @ref="editor"
                        Height="500px"
                        Width="750px"
                        @bind-ImageUrl=@ImageUrl/>

        <div class="editor-spinner-overlay">
            <SfSpinner @ref="spinner" Visible="true" Label="Loading..." />
        </div>   
      </div>
    </Content>
    <FooterTemplate>
      <div class="action-buttons">
          <button class="febtn febtn-primary me-2" @onclick="SaveAndClose">
            Save
          </button>
          <button class="febtn febtn-secondary" @onclick="CloseEditor">
            Cancel
          </button>
      </div>
    </FooterTemplate>
  </DialogTemplates>
</SfDialog>

@code {
    [Parameter] public string ImageUrl { get; set; } = "";
    [Parameter] public EventCallback<string> OnImageSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private SfImageEditor editor { get; set; }
    private SfSpinner spinner { get; set; }

    private List<ImageEditorToolbarItemModel> customToolbarItem = new List<ImageEditorToolbarItemModel>()
    {
        new ImageEditorToolbarItemModel { Name = "Zoom" },
        new ImageEditorToolbarItemModel { Name = "Annotation" },
        new ImageEditorToolbarItemModel { Name = "Crop" },
        new ImageEditorToolbarItemModel { Name = "Rotate" },
    };

    private void CloseEditor()
    {
        OnCancel.InvokeAsync();
    }

    private void OpenEditor()
    {

    }

    private async Task SaveAndClose()
    {
        if (editor != null)
        {
            byte[] imageBytes = await editor.GetImageDataAsync();

            // Call backend to upload image to blob storage
            var response = await Http.PostAsJsonAsync("apiex", new { ImagesBytes = imageBytes });

            if (response.IsSuccessStatusCode)
            {
                var savedUrl = await response.Content.ReadAsStringAsync();
                await OnImageSaved.InvokeAsync(savedUrl);
            }
            else
            {
                Console.Error.WriteLine("Failed to save image to Azure Blob Storage.");
            }
        }
    }

    async void OnDialogOpenedAsync()
    {
        await Task.Delay(500);
    }

    async void OnDialogClosedAsync()
    {
        await OnCancel.InvokeAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (editor != null && firstRender == true)
        {
            await Task.Delay(500);
            await editor.OpenAsync(ImageUrl);
            await Task.Delay(500);
            await spinner.HideAsync();
            StateHasChanged();
        }
    }
}
