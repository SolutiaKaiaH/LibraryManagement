@using Syncfusion.Blazor.ImageEditor
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Spinner
@inject HttpClient Http


<div class="image-edit-container"
     @onmouseenter="() => showPencil = true"
     @onmouseleave="() => showPencil = false">
  <img src="@ImageUrl" class="editable-image" />

  @if (showPencil)
  {
    <button class="edit-btn" @onclick="OpenEditor">
      <i class="bi bi-pencil"></i>
    </button>
  }
</div>

<SfDialog Width="800px"
          Height="650px"
          IsModal="true"
          ShowCloseIcon="true"
          @bind-Visible="isDialogVisible">
  <DialogTemplates>
    <Header>Edit Image</Header>
    <Content>
      <div class="editor-wrapper">
        <SfImageEditor @ref="editor" Height="500px">
          <ImageEditorEvents Created="OnCreated"></ImageEditorEvents>
        </SfImageEditor>
      </div>
    </Content>
    <FooterTemplate>
      <div class="action-buttons">
          <button class="febtn febtn-primary me-2" @onclick="SaveAndClose">
            Save
          </button>
          <button class="febtn febtn-secondary" @onclick="() => isDialogVisible = false">
            Cancel
          </button>
      </div>
    </FooterTemplate>
  </DialogTemplates>
</SfDialog>

@code {
    [Parameter] public string ImageUrl { get; set; } = "";
    [Parameter] public EventCallback<string> OnImageSaved { get; set; }

    private bool showPencil;
    private bool isDialogVisible;
    private SfImageEditor editor;

    private bool shouldLoadImage;

    private void OpenEditor()
    {
        isDialogVisible = true;
        shouldLoadImage = true;
    }

    private async Task SaveAndClose()
    {
        if (editor != null)
        {
            byte[] imageBytes = await editor.GetImageDataAsync();
            isDialogVisible = false;

            // Call backend to upload image to blob storage
            var response = await Http.PostAsJsonAsync("apiex", new { ImagesBytes = imageBytes });

            if (response.IsSuccessStatusCode)
            {
                var savedUrl = await response.Content.ReadAsStringAsync();
                await OnImageSaved.InvokeAsync(savedUrl);
            }
            else
            {
                Console.Error.WriteLine("Failed to save image to Azure Blob Storage.");
            }
        }
    }

    private void OnCreated()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldLoadImage && isDialogVisible && editor != null)
        {
            shouldLoadImage = false;
            await Task.Delay(50);
            await editor.OpenAsync(ImageUrl);
        }
    }
}
